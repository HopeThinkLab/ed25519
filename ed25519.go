// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package ed25519 implements the Ed25519 signature algorithm. See
// http://ed25519.cr.yp.to/.
package ed25519

// This code is a port of the public domain, "ref10" implementation of ed25519
// from SUPERCOP.

import (
	"bytes"
	"crypto/sha512"
)

const (
	// EntropySize is the number of bytes that need to be provided as input to
	// GenerateKey.
	EntropySize = 32

	// PublicKeySize is the number of bytes in the public keys generated by
	// this package.
	PublicKeySize = 32

	// SecretKeySize is the number of bytes in the secret keys generated by
	// this package.
	SecretKeySize = 64

	// SignatureSize is the number of bytes in the signatures generated by this
	// package.
	SignatureSize = 64
)

// GenerateKey generates a public/secret key pair using randomness from rand.
func GenerateKey(entropy [32]byte) (publicKey *[PublicKeySize]byte, secretKey *[SecretKeySize]byte, err error) {
	secretKey = new([64]byte)
	publicKey = new([32]byte)
	copy(secretKey[:], entropy[:])

	h := sha512.New()
	h.Write(secretKey[:32])
	digest := h.Sum(nil)

	digest[0] &= 248
	digest[31] &= 127
	digest[31] |= 64

	var A extendedGroupElement
	var hBytes [32]byte
	copy(hBytes[:], digest)
	GeScalarMultBase(&A, &hBytes)
	A.ToBytes(publicKey)

	copy(secretKey[32:], publicKey[:])
	return
}

// Sign signs the message with secretKey and returns a signature.
func Sign(secretKey *[SecretKeySize]byte, message []byte) *[SignatureSize]byte {
	h := sha512.New()
	h.Write(secretKey[:32])

	var digest1, messageDigest, hramDigest [64]byte
	var expandedSecretKey [32]byte
	h.Sum(digest1[:0])
	copy(expandedSecretKey[:], digest1[:])
	expandedSecretKey[0] &= 248
	expandedSecretKey[31] &= 63
	expandedSecretKey[31] |= 64

	h.Reset()
	h.Write(digest1[32:])
	h.Write(message)
	h.Sum(messageDigest[:0])

	var messageDigestReduced [32]byte
	scReduce(&messageDigestReduced, &messageDigest)
	var R extendedGroupElement
	GeScalarMultBase(&R, &messageDigestReduced)

	var encodedR [32]byte
	R.ToBytes(&encodedR)

	h.Reset()
	h.Write(encodedR[:])
	h.Write(secretKey[32:])
	h.Write(message)
	h.Sum(hramDigest[:0])
	var hramDigestReduced [32]byte
	scReduce(&hramDigestReduced, &hramDigest)

	var s [32]byte
	scMulAdd(&s, &hramDigestReduced, &expandedSecretKey, &messageDigestReduced)

	signature := new([64]byte)
	copy(signature[:], encodedR[:])
	copy(signature[32:], s[:])
	return signature
}

// Verify returns true iff sig is a valid signature of message by publicKey.
func Verify(publicKey *[PublicKeySize]byte, message []byte, sig *[SignatureSize]byte) bool {
	if sig[63]&224 != 0 {
		return false
	}

	var A extendedGroupElement
	if !A.FromBytes(publicKey) {
		return false
	}

	h := sha512.New()
	h.Write(sig[:32])
	h.Write(publicKey[:])
	h.Write(message)
	var digest [64]byte
	h.Sum(digest[:0])

	var hReduced [32]byte
	scReduce(&hReduced, &digest)

	var R projectiveGroupElement
	var b [32]byte
	copy(b[:], sig[32:])
	GeDoubleScalarMultVartime(&R, &hReduced, &A, &b)

	var checkR [32]byte
	R.ToBytes(&checkR)
	return bytes.Equal(sig[:32], checkR[:])
}
